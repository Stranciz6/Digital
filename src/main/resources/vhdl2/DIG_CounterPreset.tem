LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity DIG_CounterPreset is
  <? vhdl.beginGenericPort();?>
  generic ( Bits: integer;<?       vhdl.registerGeneric("Bits");?>
            maxValue: integer );<? vhdl.registerGeneric("maxValue");?>
  port (
    PORT_out : out std_logic_vector((Bits-1) downto 0);
    PORT_ovf : out std_logic;
    PORT_C   : in std_logic;
    PORT_en  : in std_logic;
    PORT_clr : in std_logic;
    PORT_dir : in std_logic;
    PORT_in  : in std_logic_vector((Bits-1) downto 0);
    PORT_ld  : in std_logic );
  <? vhdl.endGenericPort();?>
end DIG_CounterPreset;

architecture DIG_CounterPreset_arch of DIG_CounterPreset is
   signal count : std_logic_vector((Bits-1) downto 0) := (others => '0');

   function maxVal ( maxv : integer )
       return integer is variable m : integer;
   begin
      if (maxv = 0) then
        m := (2**Bits)-1;
      else
        m := maxv;
      end if;
      return m;
   end function maxVal;

begin
    process (PORT_C, PORT_en)
    begin
      if rising_edge(PORT_C) then
        if PORT_clr='1' then
          count <= (others => '0');
        elsif PORT_ld='1' then
          count <= PORT_in;
        elsif PORT_en='1' then
          if PORT_dir='0' then
            if count=maxVal(maxValue) then
              count <= (others => '0');
            else
              count <= count + 1;
            end if;
          else
            if count=<?=0?> then
              count <= std_logic_vector(to_unsigned(maxVal(maxValue), Bits));
            else
              count <= count - 1;
            end if;
          end if;
        end if;
      end if;
    end process;

    PORT_out <= count;
    PORT_ovf <= PORT_en when (count = maxVal(maxValue) and PORT_dir='0') OR
                             (count = 0 and PORT_dir='1') else '0';
end DIG_CounterPreset_arch;