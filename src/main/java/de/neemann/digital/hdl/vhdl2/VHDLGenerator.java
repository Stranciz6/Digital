/*
 * Copyright (c) 2018 Helmut Neemann.
 * Use of this source code is governed by the GPL v3 license
 * that can be found in the LICENSE file.
 */
package de.neemann.digital.hdl.vhdl2;

import de.neemann.digital.core.NodeException;
import de.neemann.digital.draw.elements.Circuit;
import de.neemann.digital.draw.elements.PinException;
import de.neemann.digital.draw.library.ElementLibrary;
import de.neemann.digital.hdl.hgs.HGSEvalException;
import de.neemann.digital.hdl.model2.HDLCircuit;
import de.neemann.digital.hdl.model2.HDLModel;
import de.neemann.digital.hdl.model2.HDLException;
import de.neemann.digital.hdl.printer.CodePrinter;
import de.neemann.digital.hdl.printer.CodePrinterStr;

import java.io.*;
import java.util.ArrayList;

/**
 * Used to create the vhdl output
 */
public class VHDLGenerator implements Closeable {

    private final ElementLibrary library;
    private final CodePrinter out;
    private ArrayList<File> testBenches;

    /**
     * Creates a new exporter
     *
     * @param library the library
     * @throws IOException IOException
     */
    public VHDLGenerator(ElementLibrary library) throws IOException {
        this(library, new CodePrinterStr());
    }

    /**
     * Creates a new exporter
     *
     * @param library the library
     * @param out     the output stream
     */
    public VHDLGenerator(ElementLibrary library, CodePrinter out) {
        this.library = library;
        this.out = out;
    }

    /**
     * Exports the given circuit
     *
     * @param circuit the circuit to export
     * @return this for chained calls
     * @throws PinException     PinException
     * @throws HDLException     HDLException
     * @throws NodeException    NodeException
     * @throws IOException      IOException
     * @throws HGSEvalException HGSEvalException
     */
    public VHDLGenerator export(Circuit circuit) throws PinException, HDLException, NodeException, IOException, HGSEvalException {
        HDLModel model = new HDLModel(library).create(circuit);
        for (HDLCircuit c : model)
            c.mergeOperations().nameNets(new HDLCircuit.SimpleNaming());

        model.rename(name -> {
            if (VHDLKeywords.isKeyword(name))
                return "p_" + name;
            else {
                if (Character.isDigit(name.charAt(0)))
                    name = "n" + name;
                return name
                        .replace('.', '_')
                        .replace(',', '_')
                        .replace('-', '_')
                        .replace("\u00AC", "not")
                        .replace("~", "not")
                        .replace("=", "eq")
                        .replace("<", "le")
                        .replace(">", "gr");
            }
        });

        out.println("-- generated by Digital. Don't modify this file!");
        out.println("-- Any changes will be lost if this file is regenerated.");

        new VHDLCreator(out, model).printHDLCircuit(model.getMain());

        File outFile = out.getFile();
        if (outFile != null)
            testBenches = new VHDLTestBenchCreator(circuit, model)
                    .write(outFile)
                    .getTestFileWritten();

        return this;
    }

    /**
     * @return the test bench files, maybe null
     */
    public ArrayList<File> getTestBenches() {
        return testBenches;
    }

    @Override
    public String toString() {
        return out.toString();
    }

    @Override
    public void close() throws IOException {
        out.close();
    }
}
